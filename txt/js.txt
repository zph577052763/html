JavaScript语言的前身是LiveScript语言。由美国Netscape（网景）公司的布瑞登.艾克（Brendan Eich）为即将在1995年发布的Navigator2.0浏览器的应用而开发的脚本语言。在与Sum（升阳）公司联手及时完成了LiveScript语言的开发后，就在Navigator 2.0即将正式发布前，Netscape公司将其改名为JavaScript，也就是最初的JavaScript 1.0版本。虽然当时JavaScript1.0版本还有很多缺陷，但拥有着JavaScript 1.0版本的Navigator 2.0浏览器几乎主宰着浏览器市场。	因为JavaScript 1.0如此成功，Netscape公司在Navigator 3.0中发布了JavaScript 1.1版本。同时微软开始进军浏览器市场，发布了Internet Explorer 3.0并搭载了一个JavaScript的类似版本，其注册名称为JScript，这成为JavaScript语言发展过程中的重要一步。	在微软进入浏览器市场后，此时有3种不同的JavaScript版本同时存在，Navigator中的JavaScript、IE中的JScript以及CEnvi中的ScriptEase。与其他编程语言不同的是，JavaScript并没有一个标准来统一其语法或特性，而这3种不同的版本恰恰突出了这个问题。1997年，JavaScript 1.1版本作为一个草案提交给欧洲计算机制造商协会（ECMA）。最终由来自Netscape、Sun、微软、Borland和其他一些对脚本编程感兴趣的公司的程序员组成了TC39委员会，该委员会被委派来标准化一个通用、跨平台、中立于厂商的脚本语言的语法和语义。TC39委员会制定了“ECMAScript程序语言的规范书”（又称为“ECMA-262标准”），该标准通过国际标准化组织(ISO)采纳通过，作为各种浏览器生产开发所使用的脚本程序的统一标准。


	JavaScript脚本语言的主要特点如下：	解释性	JavaScript不同于一些编译性的程序语言，例如C、C++等，它是一种解释性的程序语言，它的源代码不需要经过编译，而直接在浏览器中运行时被解释。	基于对象	JavaScript是一种基于对象的语言。这意味着它能运用自己已经创建的对象。因此，许多功能可以来自于脚本环境中对象的方法与脚本的相互作用。	事件驱动	JavaScript可以直接对用户或客户输入做出响应，无须经过Web服务程序。它对用户的响应，是以事件驱动的方式进行的。所谓事件驱动，就是指在主页中执行了某种操作所产生的动作，此动作称为“事件”。比如按下鼠标、移动窗口、选择菜单等都可以视为事件。当事件发生后，可能会引起相应的事件响应。	跨平台	JavaScript依赖于浏览器本身，与操作环境无关，只要能运行浏览器的计算机，并支持JavaScript的浏览器就可以正确执行。	安全性	JavaScript是一种安全性语言，它不允许访问本地的硬盘，并不能将数据存入到服务器上，不允许对网络文档进行修改和删除，只能通过浏览器实现信息浏览或动态交互。这样可有效地防止数据的丢失。



所谓的标识符（identifier），就是一个名称。在JavaScript中，标识符用来命名变量和函数，或者用作JavaScript代码中某些循环的标签。在JavaScript中，合法的标识符命名规则和Java以及其他许多语言的命名规则相同，第一个字符必须是字母、下划线（-）或美元符号（$），其后的字符可以是字母、数字或下划线、美元符号。 



1．在JavaScript中	在JavaScript中调用事件处理程序，首先需要获得要处理对象的引用，然后将要执行的处理函数赋值给对应的事件。2．在HTML中	在HTML中分配事件处理程序，只需要在HTML标记中添加相应的事件，并在其中指定要执行的代码或是函数名即可。	
在页面显示时弹出警告对话框主要是在<body>标签中调用Window对象的alert()方法实现的，下面对该方法进行详细说明。	利用Window对象的alert()方法可以弹出一个警告框，并且在警告框内可以显示提示字符串文本。


Window对象可以直接调用其方法和属性，例如：	window.属性名	window.方法名（参数列表）	Window是不需要使用new运算符来创建的对象。因此，在使用Window对象时，只要直接使用“Window”来引用Window对象即可，代码如下：	window.alert（"字符串"）；	window.document.write（"字符串"）；	在实际运用中，JavaSctipt允许使用一个字符串来给窗口命名，也可以使用一些关键字来代替某些特定的窗口。例如，使用“self”代表当前窗口、“parent”代表父级窗口等。对于这种情况，可以用这些字符串来代表“window”，代码如下：	parent.属性名	parent.方法名（参数列表）